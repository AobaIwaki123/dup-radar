// Package github provides functionality to interact with GitHub API
package github

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/google/go-github/v62/github"
	"golang.org/x/oauth2"
)

// Client provides GitHub API operations
type Client struct {
	client *github.Client
}

// NewClient creates a new GitHub client
func NewClient(ctx context.Context) *Client {
	log.Printf("DEBUG: Initializing GitHub client")
	pat := os.Getenv("GITHUB_PAT")
	if pat == "" {
		log.Fatalf("ERROR: GITHUB_PAT environment variable is not set")
	}
	log.Printf("DEBUG: GitHub PAT found (length: %d)", len(pat))
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: pat})
	tc := oauth2.NewClient(ctx, ts)
	client := github.NewClient(tc)
	log.Printf("DEBUG: GitHub client initialized successfully")
	return &Client{client: client}
}

// CreateIssueComment posts a comment on a GitHub issue
func (c *Client) CreateIssueComment(ctx context.Context, owner, repo string, issueNumber int, body string) error {
	log.Printf("DEBUG: Posting comment to %s/%s#%d", owner, repo, issueNumber)
	_, _, err := c.client.Issues.CreateComment(ctx, owner, repo, issueNumber, &github.IssueComment{Body: &body})
	if err != nil {
		log.Printf("ERROR: Failed to create comment on issue #%d: %v", issueNumber, err)
		return err
	}
	log.Printf("DEBUG: Successfully posted comment to issue #%d", issueNumber)
	return nil
}

// BuildSimilarIssuesComment creates a comment with similar issues information
func BuildSimilarIssuesComment(similarity float64, ids []int64, dists []float64) string {
	log.Printf("DEBUG: Building comment with %d issue IDs and %d distances", len(ids), len(dists))
	
	if len(ids) == 0 {
		log.Printf("DEBUG: No similar issues found, returning empty comment")
		return "" // no similar issues
	}
	
	if len(dists) > 0 && dists[0] > similarity {
		log.Printf("DEBUG: Most similar issue has distance %.4f which is above threshold %.4f, returning empty comment", 
				  dists[0], similarity)
		return "" // not similar enough
	}
	
	log.Printf("DEBUG: Found similar issues below threshold, creating comment")
	var sb strings.Builder
	sb.WriteString("### ü§ñ È°û‰ºº Issue ÂÄôË£ú\n\n")
	
	issuesIncluded := 0
	for i, id := range ids {
		if i >= len(dists) || dists[i] > similarity {
			log.Printf("DEBUG: Stopping at issue #%d with distance %.4f (above threshold %.4f)", 
					  id, dists[i], similarity)
			break
		}
		sb.WriteString(fmt.Sprintf("* #%d (Ë∑ùÈõ¢ %.3f)\n", id, dists[i]))
		issuesIncluded++
		log.Printf("DEBUG: Added issue #%d with distance %.4f to comment", id, dists[i])
	}
	
	sb.WriteString("\n_Comment generated by DupRadar_\n")
	log.Printf("DEBUG: Created comment with %d similar issues", issuesIncluded)
	
	return sb.String()
}
